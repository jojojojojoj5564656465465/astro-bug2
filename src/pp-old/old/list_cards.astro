---
// import { Icon } from 'astro-icon'
import { Image } from '@astrojs/image/components'
import { HTMLElement, IntersectionObserver, MouseEvent } from '/node_modules/types/dom'

interface Card {
	title: string
	description: string
	link?: string
	image: Promise<typeof import('*.jpg')>
}

const Card: Set<Card> = new Set([
	{
		title: 'Kobido',
		description:
			'Le massage Kobido est une méthode naturelle parmi les plus efficaces pour ralentir le processus de vieillissement de la peau et obtenir un effet liftant naturel.',
		image: import('@img/images/slider-1.jpg')
	},
	{
		title: 'Gua-Sha',
		description:
			'Le nom même de cette technique ancestrale venue d’Orient trouve son origine dans la contraction de deux hiéroglyphes: “gua” – gratter et “ sha” – mal.',
		image: import('@img/images/slider-6.jpg')
	},
	{
		title: 'BMS',
		description:
			'Essayez l’appareil BMS et vous serez convaincue de son effet rajeunissant pour la peau du visage et du corps.',
		link: '',
		image: import('@img/images/slider-7.jpg')
	},
	{
		title: 'OSTEOPLASTIE',
		description:
			'Est une technique de modelage manuel du visage et du corps pour rajeunir et corriger la tenue posturale et faciale naturellement.',
		link: '',
		image: import('@img/images/slider-2.jpg')
	},
	{
		title: 'Extension de cils',
		description:
			'Une Extension de cils est un procédé qui concerne chaque cil, l’un et après l’autre, et qui requiert une technique très précise et minutieuse.',
		link: '',
		image: import('@img/images/slider-3.jpg')
	},
	{
		title: 'Le Chiromassage',
		description:
			'Il est basé sur la technique proposée au début du XXe siècle par le médecin naturopathe Ferrandis, le fondateur de l’école espagnole de massage, qui vise non seulement l’état physique, mais aussi l’état psycho-émotionnel d’une personne.',
		link: '',
		image: import('@img/images/slider-4.jpg')
	}
])
---

<section aria-labelledby="slider" class="fade-up grid gap-4 bg-primary text-center container sm:text-left">
	<div class="relative">
		<span class="absolute hidden h-full w-8 bg-ternary opacity-80 -left-9 sm:block"></span>
		<div>
			<small class="drop-shadow-text-sm tracking-widest uppercase text-slate-300">Tous nos services</small>
			<h2 id="slider" class="drop-shadow-text-md text-3xl font-bold tracking-wide text-slate-100">
				Places without People
			</h2>
		</div>
		<div class="mt-2 flex flex-wrap gap-4 flex-row-5 sm:flex-nowrap sm:justify-between">
			<p class="max-w-2xl text-base|slate-100|start leading-8">
				Nos services Lorem ipsum dolor sit amet consectetur, adipisicing elit. Modi incidunt reprehenderit
				corporis repellendus hic? Pariatur fugit quas animi exercitationem eos. Eos adipisci voluptatibus illo
				fuga! Laborum natus porro error commodi.
			</p>
			<div class="flex gap-x-2">
				<button
					data-slideBtn
					id="prev"
					aria-label="show previous image"
					class="grid place-items-center rounded-full bg-primary p-2 text-black opacity-90 ring-offset-2 ring-primary ring-offset-black disabled:bg-secondary hover:bg-primary disabled:text-ternary focus:outline-none focus-visible:ring-4"
					disabled>
					<svg
						xmlns="http://www.w3.org/2000/svg"
						width="36"
						height="36"
						class="pointer-events-none"
						fill="currentColor"
						viewBox="0 0 256 256">
						<rect width="256" height="256" fill="none"></rect>
						<circle
							cx="128"
							cy="128"
							r="96"
							fill="none"
							stroke="currentColor"
							stroke-linecap="round"
							stroke-linejoin="round"
							stroke-width="24"></circle>
						<polyline
							points="121.9 161.9 88 128 121.9 94.1"
							fill="none"
							stroke="currentColor"
							stroke-linecap="round"
							stroke-linejoin="round"
							stroke-width="24"></polyline>
						<line
							x1="168"
							y1="128"
							x2="88"
							y2="128"
							fill="none"
							stroke="currentColor"
							stroke-linecap="round"
							stroke-linejoin="round"
							stroke-width="24"></line>
					</svg>
				</button>
				<button
					data-slideBtn
					id="next"
					aria-label="show next image"
					class="grid place-items-center rounded-full bg-primary p-2 text-black ring-offset-2 ring-secondary ring-offset-ternary disabled:bg-secondary hover:bg-primary disabled:text-ternary focus:outline-none focus-visible:ring-4">
					<svg
						xmlns="http://www.w3.org/2000/svg"
						width="36"
						height="36"
						class="pointer-events-none"
						fill="currentColor"
						viewBox="0 0 256 256">
						<rect width="256" height="256" fill="none"></rect>
						<circle
							cx="128"
							cy="128"
							r="96"
							fill="none"
							stroke="currentColor"
							stroke-linecap="round"
							stroke-linejoin="round"
							stroke-width="24"></circle>
						<polyline
							points="134.1 161.9 168 128 134.1 94.1"
							fill="none"
							stroke="currentColor"
							stroke-linecap="round"
							stroke-linejoin="round"
							stroke-width="24"></polyline>
						<line
							x1="88"
							y1="128"
							x2="168"
							y2="128"
							fill="none"
							stroke="currentColor"
							stroke-linecap="round"
							stroke-linejoin="round"
							stroke-width="24"></line>
					</svg>
				</button>
			</div>
		</div>
	</div>
</section>
<div class="overflow-hidden bg-secondary container">
	<div class="relative flex basis-96 pr-4 transition-transform duration-500" data-slideContainer>
		{
			Array.from(Card, ({ image, title, description, link }, index) => {
				return (
					<>
						<div class="relative w-full flex-shrink-0 flex-grow-0 pr-4 xs:w-auto xs:basis-92" data-slide>
							<div class="relative">
								<h3 class="pointer-events-none absolute bottom-2 left-2 bg-primary text-lg font-bold tracking-wide text-black transition-opacity p-10-0">
									{index + 1}-{title}
								</h3>
							</div>
							<Image src={image} width={750} height={250} alt={title} />

							<p class="text-sm|slate-200 leading-normal">{description}</p>
						</div>
					</>
				)
			})
		}
	</div>
</div>

<!-- [@media(hover:hover)]:grayscale hover:grayscale-0 -->

<script>
	// Import the necessary libraries

	// Define the variables
	const slideBtns: HTMLElement[] = Array.from(document.querySelectorAll('[data-slideBtn]'))
	const slideContainer: NonNullable<HTMLElement> = document.querySelector('[data-slideContainer]')!
	const slides: HTMLElement[] = Array.from(document.querySelectorAll('[data-slide]'))

	// Initialize the variables
	let currentIndex = 0
	let isMoving = false

	// Define the function to handle the click event on the slide buttons
	function handleSlideBtnClick(e: MouseEvent): void {
		// If the slide is moving, return
		if (isMoving) {
			return
		}

		// Set the flag that the slide is moving
		isMoving = true

		// Get the id of the clicked button
		const id = (e.currentTarget as HTMLButtonElement).id

		// If the id is "prev", decrease the current index
		if (id === 'prev') {
			currentIndex--
		} else {
			// Otherwise, increase the current index
			currentIndex++
		}

		// If the slide container exists, dispatch the "sliderMove" event
		if (slideContainer) {
			slideContainer.dispatchEvent(new Event('sliderMove'))
		} else {
			// Otherwise, log an error
			console.error('Element [data-slideContainer] not found')
		}
	}

	// Define the function to remove the disabled attribute from an array of elements
	const removeDisabledAttribute = (els: HTMLElement[]): void => {
		// Iterate over the elements
		for (const el of els) {
			// Remove the disabled attribute
			el.removeAttribute('disabled')
		}
	}

	// Define the function to add the disabled attribute to an array of elements
	const addDisabledAttribute = (els: HTMLElement[]): void => {
		// Iterate over the elements
		for (const el of els) {
			// Add the disabled attribute
			el.setAttribute('disabled', 'true')
		}
	}

	// Define the function to check if an element is a button
	function isButton(element: HTMLElement): element is HTMLButtonElement {
		// Return true if the element's tag name is "BUTTON"
		return element.tagName === 'BUTTON'
	}

	// Iterate over the slide buttons and add event listeners
	slideBtns.forEach((btn) => {
		// If the button is a button, add an event listener for the "click" event
		if (isButton(btn)) {
			btn.addEventListener('click', handleSlideBtnClick)
		}
	})

	// Add an event listener for the "sliderMove" event
	slideContainer.addEventListener('sliderMove', () => {
		// Translate the container to the right/left
		slideContainer.style.transform = `translateX(-${currentIndex * slides[0].clientWidth}px)`

		// Remove the disabled attributes from the slide buttons
		removeDisabledAttribute(slideBtns)

		// If the current index is 0, re-enable the disabled attribute for the first slide button
		if (currentIndex === 0) {
			addDisabledAttribute([slideBtns[0]])
		}
	})

	// Add an event listener for the "transitionend" event
	slideContainer.addEventListener('transitionend', () => (isMoving = false))

	// Disable image drag events
	document.querySelectorAll<HTMLElement>('[data-slide] img').forEach((img) => (img.ondragstart = () => false))

	// Create a new IntersectionObserver
	const slideObserver: IntersectionObserver = new IntersectionObserver(
		([slide]) => {
			// If the slide is intersecting, add the disabled attribute to the next slide button
			if (slide.isIntersecting) {
				addDisabledAttribute([slideBtns[1]])
			}
		},
		{ threshold: 0.75 }
	)

	// Observe the last slide
	slideObserver.observe(slides[slides.length - 1])
</script>
